=== Design and Implementation Plan Questions ===

Below are a few questions about how you will design your program and your
implementation plan. It is crucial to have a reasonable design and
implementation plan before you start your program. Without this, success is
unlikely. The following questions will help guide you in your thinking and
raise some important questions and issues. There is no single "right" answer
to each of the questions but there are some "wrong" answers. Some designs and
plans are better than others. The point here is for you to think about what
you're going to do.

Make a copy of this file and edit it, adding your answers then turn this
document in.

----------------------------------------------------------------------

1) The instructions.txt document lists a minimum set of classes that you need
to have in your program: family, familymgr, hashtable. How will each of these
classes relate to each other. For example, will some of these classes contain
other classes as data members? Will some of these classes call methods on the
other classes?

  familymgr -- hashtable: 

	The familymanager class will interact with the hash table class to add family instances to it.

  familymgr -- family: 
  
	The familymanager class will have to make family instances with new family data.

  family -- hashtable: 
  
	The hash table will contain family objects in it, to perform the dumb table functionality it may call an family instance method to print the family name, ID, etc.

2) What will be the data type for the array elements in your hashtable? I am
asking for an actual data type, not just a description of the kind of data
that will be in your array.

	The hash table will contain data of type family, from the family class.

3) Your familymgr class should be written in such a way that you could replace
the hashtable with a linked list (if you had a linked list that held family
data) very easily. How are you going to design your program so that this
change could be made quickly?

This will be done by creating an interface for the hash table that will be exposed family manager class. This makes it simple to change data structures, as you would only need to keep the same function names. i.e. insert, lookup, etc.

4) What is your testing strategy? Has your testing strategy changed since the
first programming assignment (martian_weather) and if so, how?

My testing strategy has not changed since the first project. I still think itâ€™s good to give the program bogus input, excessively large input, etc. As well as, test every function to verify that it is working as intended. 





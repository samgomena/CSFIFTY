=== Design and Implementation Plan Questions ===

Below are a few questions about how you will design your program and your
implementation plan. It is crucial to have a reasonable design and
implementation plan before you start your program. Without this, success is
unlikely. The following questions will help guide you in your thinking and
raise some important questions and issues. There is no single "right" answer
to each of the questions but there are some "wrong" answers. Some designs and
plans are better than others. The point here is for you to think about what
you're going to do.

Make a copy of this file and edit it, adding your answers then turn this
document in.

----------------------------------------------------------------------

1) What parts of the this program make it so that a tree structure is
required? That is, why not just store everything in a linked list or hash
table?

    A tree structure is desirable to use because of the fact that each plant produces two offspring. Having a guaranteed two offspring is thus, innately, a binary tree.
    

2) Why should the plant class NOT have pointers to other plant clasess?

    The plant class should not have pointers to other plant classes so as one plant class cannot alter the data in another plant class. In other words, it goes towards the elements of good design practices.

3) Why should the treenode class NOT have pointers to the parent node?

    The treenode class should not have pointers to the parent nodes because it is not required. That is, it adds a layer of complexity that is not required.

4) This assignment doesn't require the ability to remove nodes from the tree
(except from the destructor). What would be the problem with allowing a node
in the middle of the tree to be removed?

    Removing a node in the middle of the tree would be problematic becuase there's a chance the rest of the tree would need to be adjusted. That is, the program may potentially have to adjust all of nodes under the removed node.

5) This program requires that each node in the tree has exactly 2
children. What would be a way to allow each node to have 1 or more children
(no limit)? What would be the challenges with that?

    The challenges with implementing a no-child-limit tree would be the complexity of adding/searching/removing nodes from the tree, as you may potentially need to traverse a large number of nodes. You would also run in to the same problems with removing as above.





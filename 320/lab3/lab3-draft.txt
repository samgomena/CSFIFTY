-----------------------------------------------------------------
CS 320 Principles of Programming Languages            Spring 2019
Lab 3
-----------------------------------------------------------------
Goals for this lab:

* Understand the role and basic implementation techniques
  for typical compiler phases, particularly lexical analysis
  and parsing.

* Develop practical skills writing recursive Haskell functions
  for processing lists.

* Explore the relationship between grammars and parsers.

-----------------------------------------------------------------
Outline:

Many of the comments from the previous labs apply here also;
at this stage, we will assume that you already know the basic
steps from and setup details from earlier labs.  For this lab
in particular:

  cd cs320   # or whatever directory name you've chosen
             # (should include files from Lab 1)

  cat ~mpj/get-lab3      # if you want to read the commands
  source ~mpj/get-lab3

Our main goal in this lab is to walk through the construction of
three programs, step by step, explaining the details of their
construction and demonstrating/testing them as we proceed.
The outline below provides the versions of the code for each
of these programs that we will attempt to create during the
lab sessions.  Final versions of these programs, potentially
including additional code, will be distributed after the labs,
but students are strongly encouraged to follow along and
create/run/test their own versions as we work through the lab.

-------------
Possible preludes:

- Show some simple examples to explain evaluation of Haskell
  expressions using a substitution/reduction model, including
  basic features like functions, pattern matching, and guards.

- Show the code in SimpProp.lhs as an example of the kind of
  thing that we might be able to do ... if only we had a way
  to treat "Programs as Data" ...

-------------
1) Lex.lhs, a lexical analyzer for the Prop language.

Note that TRUE and FALSE are not recognized: will need to fix
that!

> module Lex where
  
> import Data.Char

> data Token = TAND | TOR | TNOT
>            | TOPEN | TCLOSE
>            | TVAR String
>              deriving Show

> lexprop           :: [Char] -> [Token]
> lexprop []         = []
> lexprop ('(':cs)   = TOPEN  : lexprop cs
> lexprop (')':cs)   = TCLOSE : lexprop cs
> lexprop (c:cs)
>     | isSpace c    = lexprop cs
>     | isAlphaNum c = lexword (c:cs)
>     | otherwise    = error ("unexpected character " ++ [c])

> lexword   :: [Char] -> [Token]
> lexword cs = case span isAlphaNum cs of
>                ("AND", rest) -> TAND : lexprop rest
>                ("OR",  rest) -> TOR  : lexprop rest
>                ("NOT", rest) -> TNOT : lexprop rest
>                (word,  rest) -> TVAR word : lexprop rest

-------------
2) Parse.lhs, a parser for the Prop language (using prefix
   syntax).

Note that only variables, NOT, and AND are recognized; we will
need to fix that later!

> module Parse where
  
> import Pic
> import Prop
> import Lex

> picProp = picTree . fst . parseProp . lexProp

> parseProp              :: [Token] -> (Prop, [Token])
> parseProp (TVAR v : ts) = (VAR v, ts)
> parseProp (TNOT   : ts) = case parseProp ts of
>                             (p, ts1) -> (NOT p, ts1)
> parseProp (TAND   : ts) = case parseProp ts of
>                             (p, ts1) -> case parseProp ts1 of
>                                           (q, ts2) -> (AND p q, ts2)

Notes: As a first attempt, we might start with:

  parseProp :: [Token] -> Prop

But we will soon discover that this is not flexible enough;
instead we need a function:

  parseProp :: [Token] -> (Prop, [Token])

The key idea here is that a parsing function takes a list of
tokens ts as its input, constructs an abstract syntax tree p
using tokens from the front of ts, and then returns p paired
with the list of unused tokens, ts1, as its result.  In pictures:

  initial input ts containing all tokens
    _________________________________
   /                                 \
   [t1, t2, t3, .... , tN, tN+1, ... ]
   \_____________________/ \_________/
     use these tokens to     return this list
    construct an abstract    of unused tokens
        syntax tree p             as ts1

-------------
3) ParseInfix.lhs, a parser for the Prop language (using infix
   syntax).

General strategy:

- Copy Parse.lhs to ParseInfix.lhs to get started.

- Construct a grammar for Prop terms that uses infix syntax.
  We will structure our grammar in levels, starting with
  atomic expressions (but omitting TRUE, FALSE, parens),
  and then adding additional operators in decreasing order of
  precedence.  We will use right recursive productions for OR
  and AND operators so that these will be treated as grouping
  to the right.

- Build a parser with a separate parseX function for each
  nonterminal X in the grammar.

> module ParseInfix where

> import Pic
> import Prop
> import Lex

> ppic = picTree . prop           
> prop = checkTrailing . parseProp . lexProp

> checkTrailing (p, []) = p 
> checkTrailing (p, ts) = error ("trailing tokens: " ++ show ts)

Grammar:

   P -> C OR P     propositions
   P -> C

> parseProp              :: [Token] -> (Prop, [Token])
> parseProp ts            = case parseConj ts of
>                             (p, TOR : ts1) -> case parseProp ts1 of
>                                                 (q, ts2) -> (OR p q, ts2)
>                             (p, ts1) -> (p, ts1)

   C -> N AND C    conjunctions
   C -> N

> parseConj              :: [Token] -> (Prop, [Token])
> parseConj ts            = case parseNeg ts of
>                             (p, TAND : ts1) -> case parseConj ts1 of
>                                                  (q, ts2) -> (AND p q, ts2)
>                             (p, ts1) -> (p, ts1)

   N -> NOT N      negations
   N -> A

> parseNeg               :: [Token] -> (Prop, [Token])
> parseNeg (TNOT : ts)    = case parseNeg ts of
>                             (p, ts1) -> (NOT p, ts1)
> parseNeg ts             = parseAtom ts

   A -> VAR        atoms
   A -> TRUE
   A -> FALSE
   A -> ( P )

> parseAtom              :: [Token] -> (Prop, [Token])
> parseAtom (TVAR v : ts) = (VAR v, ts)
> parseAtom ts            = error "syntax error: missing atom"

-----------------------------------------------------------------
- Lab exercises:

1) Modify the lexer so that it recognizes TRUE and FALSE as
   tokens instead of treating them as variables.  Write some
   simple tests to show that your modified lexer is working
   correctly.

2) Extend the prefix notation parser (in Parse.lhs) to recognize
   TRUE, FALSE, OR, and parentheses.  Again, write some simple
   tests to show that your modified parser is working correctly.

3) What is the role of parentheses in the prefix notation parser?

4) Complete the definition of the infix notation parser
   by adding code to handle TRUE, FALSE, and parenthesized
   expressions as atoms.  As in Exercises 1 and 2, write some
   simple tests to satisfy yourself that the resulting parser
   is working correctly.

5) Modify the lexer so that you can use the characters &, |,
   and ! instead of (in addition to) AND, OR, and NOT.

6) How can you modify the grammar so that the AND operator
   will be treated as grouping to the left?  What happens if
   you make the corresponding changes to your infix parser?
   Can you find a different way to implement parseConj so that
   it will avoid these problems?

-----------------------------------------------------------------
- These exercises will likely require all of the time available
  in lab 3.

- If you do manage to finish these exercises during the lab time,
  you might want to continue with HW3, Q4.

- It will probably be much harder to answer HW3, Q4 if you try
  to do that without completing these exercises!

- As always, ask for help if you get stuck --- that's why
  we're here!

- Be sure to observe the policies for academic integrity that
  are stated in the syllabus.

-----------------------------------------------------------------
